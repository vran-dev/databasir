/*
 * This file is generated by jOOQ.
 */
package com.databasir.dao.tables;


import com.databasir.dao.Databasir;
import com.databasir.dao.Indexes;
import com.databasir.dao.Keys;
import com.databasir.dao.converter.ProjectSyncTaskStatusConverter;
import com.databasir.dao.enums.ProjectSyncTaskStatus;
import com.databasir.dao.tables.records.ProjectSyncTaskRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectSyncTask extends TableImpl<ProjectSyncTaskRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>databasir.project_sync_task</code>
     */
    public static final ProjectSyncTask PROJECT_SYNC_TASK = new ProjectSyncTask();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectSyncTaskRecord> getRecordType() {
        return ProjectSyncTaskRecord.class;
    }

    /**
     * The column <code>databasir.project_sync_task.id</code>.
     */
    public final TableField<ProjectSyncTaskRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>databasir.project_sync_task.project_id</code>.
     */
    public final TableField<ProjectSyncTaskRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>databasir.project_sync_task.user_id</code>.
     */
    public final TableField<ProjectSyncTaskRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>databasir.project_sync_task.status</code>. NEW  RUNNING 
     * FINISHED  FAILED  CANCELED
     */
    public final TableField<ProjectSyncTaskRecord, ProjectSyncTaskStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("NEW", SQLDataType.VARCHAR)), this, "NEW  RUNNING  FINISHED  FAILED  CANCELED", new ProjectSyncTaskStatusConverter());

    /**
     * The column <code>databasir.project_sync_task.result</code>.
     */
    public final TableField<ProjectSyncTaskRecord, String> RESULT = createField(DSL.name("result"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>databasir.project_sync_task.run_at</code>.
     */
    public final TableField<ProjectSyncTaskRecord, LocalDateTime> RUN_AT = createField(DSL.name("run_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>databasir.project_sync_task.update_at</code>.
     */
    public final TableField<ProjectSyncTaskRecord, LocalDateTime> UPDATE_AT = createField(DSL.name("update_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>databasir.project_sync_task.create_at</code>.
     */
    public final TableField<ProjectSyncTaskRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private ProjectSyncTask(Name alias, Table<ProjectSyncTaskRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProjectSyncTask(Name alias, Table<ProjectSyncTaskRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>databasir.project_sync_task</code> table
     * reference
     */
    public ProjectSyncTask(String alias) {
        this(DSL.name(alias), PROJECT_SYNC_TASK);
    }

    /**
     * Create an aliased <code>databasir.project_sync_task</code> table
     * reference
     */
    public ProjectSyncTask(Name alias) {
        this(alias, PROJECT_SYNC_TASK);
    }

    /**
     * Create a <code>databasir.project_sync_task</code> table reference
     */
    public ProjectSyncTask() {
        this(DSL.name("project_sync_task"), null);
    }

    public <O extends Record> ProjectSyncTask(Table<O> child, ForeignKey<O, ProjectSyncTaskRecord> key) {
        super(child, key, PROJECT_SYNC_TASK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Databasir.DATABASIR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PROJECT_SYNC_TASK_IDX_PROJECT_ID, Indexes.PROJECT_SYNC_TASK_IDX_USER_ID);
    }

    @Override
    public Identity<ProjectSyncTaskRecord, Integer> getIdentity() {
        return (Identity<ProjectSyncTaskRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProjectSyncTaskRecord> getPrimaryKey() {
        return Keys.KEY_PROJECT_SYNC_TASK_PRIMARY;
    }

    @Override
    public ProjectSyncTask as(String alias) {
        return new ProjectSyncTask(DSL.name(alias), this);
    }

    @Override
    public ProjectSyncTask as(Name alias) {
        return new ProjectSyncTask(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectSyncTask rename(String name) {
        return new ProjectSyncTask(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectSyncTask rename(Name name) {
        return new ProjectSyncTask(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, Integer, ProjectSyncTaskStatus, String, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
