/*
 * This file is generated by jOOQ.
 */
package com.databasir.dao.tables;


import com.databasir.dao.Databasir;
import com.databasir.dao.Keys;
import com.databasir.dao.tables.records.UserFavoriteProjectRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserFavoriteProjectTable extends TableImpl<UserFavoriteProjectRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>databasir.user_favorite_project</code>
     */
    public static final UserFavoriteProjectTable USER_FAVORITE_PROJECT = new UserFavoriteProjectTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserFavoriteProjectRecord> getRecordType() {
        return UserFavoriteProjectRecord.class;
    }

    /**
     * The column <code>databasir.user_favorite_project.id</code>.
     */
    public final TableField<UserFavoriteProjectRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>databasir.user_favorite_project.user_id</code>.
     */
    public final TableField<UserFavoriteProjectRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>databasir.user_favorite_project.project_id</code>.
     */
    public final TableField<UserFavoriteProjectRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>databasir.user_favorite_project.create_at</code>.
     */
    public final TableField<UserFavoriteProjectRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private UserFavoriteProjectTable(Name alias, Table<UserFavoriteProjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserFavoriteProjectTable(Name alias, Table<UserFavoriteProjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>databasir.user_favorite_project</code> table
     * reference
     */
    public UserFavoriteProjectTable(String alias) {
        this(DSL.name(alias), USER_FAVORITE_PROJECT);
    }

    /**
     * Create an aliased <code>databasir.user_favorite_project</code> table
     * reference
     */
    public UserFavoriteProjectTable(Name alias) {
        this(alias, USER_FAVORITE_PROJECT);
    }

    /**
     * Create a <code>databasir.user_favorite_project</code> table reference
     */
    public UserFavoriteProjectTable() {
        this(DSL.name("user_favorite_project"), null);
    }

    public <O extends Record> UserFavoriteProjectTable(Table<O> child, ForeignKey<O, UserFavoriteProjectRecord> key) {
        super(child, key, USER_FAVORITE_PROJECT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Databasir.DATABASIR;
    }

    @Override
    public Identity<UserFavoriteProjectRecord, Integer> getIdentity() {
        return (Identity<UserFavoriteProjectRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserFavoriteProjectRecord> getPrimaryKey() {
        return Keys.KEY_USER_FAVORITE_PROJECT_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserFavoriteProjectRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_USER_FAVORITE_PROJECT_UK_USER_ID_PROJECT_ID);
    }

    @Override
    public UserFavoriteProjectTable as(String alias) {
        return new UserFavoriteProjectTable(DSL.name(alias), this);
    }

    @Override
    public UserFavoriteProjectTable as(Name alias) {
        return new UserFavoriteProjectTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFavoriteProjectTable rename(String name) {
        return new UserFavoriteProjectTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFavoriteProjectTable rename(Name name) {
        return new UserFavoriteProjectTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
