/*
 * This file is generated by jOOQ.
 */
package com.databasir.dao.tables;


import com.databasir.dao.Databasir;
import com.databasir.dao.Keys;
import com.databasir.dao.tables.records.DocumentDescriptionRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * custom document description
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DocumentDescription extends TableImpl<DocumentDescriptionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>databasir.document_description</code>
     */
    public static final DocumentDescription DOCUMENT_DESCRIPTION = new DocumentDescription();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentDescriptionRecord> getRecordType() {
        return DocumentDescriptionRecord.class;
    }

    /**
     * The column <code>databasir.document_description.id</code>.
     */
    public final TableField<DocumentDescriptionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>databasir.document_description.content</code>.
     */
    public final TableField<DocumentDescriptionRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>databasir.document_description.project_id</code>.
     */
    public final TableField<DocumentDescriptionRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>databasir.document_description.table_name</code>.
     */
    public final TableField<DocumentDescriptionRecord, String> TABLE_NAME = createField(DSL.name("table_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>databasir.document_description.column_name</code>.
     */
    public final TableField<DocumentDescriptionRecord, String> COLUMN_NAME = createField(DSL.name("column_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>databasir.document_description.update_by</code>.
     */
    public final TableField<DocumentDescriptionRecord, Integer> UPDATE_BY = createField(DSL.name("update_by"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>databasir.document_description.update_at</code>.
     */
    public final TableField<DocumentDescriptionRecord, LocalDateTime> UPDATE_AT = createField(DSL.name("update_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>databasir.document_description.create_at</code>.
     */
    public final TableField<DocumentDescriptionRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private DocumentDescription(Name alias, Table<DocumentDescriptionRecord> aliased) {
        this(alias, aliased, null);
    }

    private DocumentDescription(Name alias, Table<DocumentDescriptionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("custom document description"), TableOptions.table());
    }

    /**
     * Create an aliased <code>databasir.document_description</code> table
     * reference
     */
    public DocumentDescription(String alias) {
        this(DSL.name(alias), DOCUMENT_DESCRIPTION);
    }

    /**
     * Create an aliased <code>databasir.document_description</code> table
     * reference
     */
    public DocumentDescription(Name alias) {
        this(alias, DOCUMENT_DESCRIPTION);
    }

    /**
     * Create a <code>databasir.document_description</code> table reference
     */
    public DocumentDescription() {
        this(DSL.name("document_description"), null);
    }

    public <O extends Record> DocumentDescription(Table<O> child, ForeignKey<O, DocumentDescriptionRecord> key) {
        super(child, key, DOCUMENT_DESCRIPTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Databasir.DATABASIR;
    }

    @Override
    public Identity<DocumentDescriptionRecord, Integer> getIdentity() {
        return (Identity<DocumentDescriptionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DocumentDescriptionRecord> getPrimaryKey() {
        return Keys.KEY_DOCUMENT_DESCRIPTION_PRIMARY;
    }

    @Override
    public List<UniqueKey<DocumentDescriptionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_DOCUMENT_DESCRIPTION_UK_PROJECT_ID_TABLE_NAME_COLUMN_NAME);
    }

    @Override
    public DocumentDescription as(String alias) {
        return new DocumentDescription(DSL.name(alias), this);
    }

    @Override
    public DocumentDescription as(Name alias) {
        return new DocumentDescription(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentDescription rename(String name) {
        return new DocumentDescription(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentDescription rename(Name name) {
        return new DocumentDescription(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, Integer, String, String, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
