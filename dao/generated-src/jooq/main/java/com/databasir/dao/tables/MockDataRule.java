/*
 * This file is generated by jOOQ.
 */
package com.databasir.dao.tables;


import com.databasir.dao.Databasir;
import com.databasir.dao.Keys;
import com.databasir.dao.converter.MockDataTypeConverter;
import com.databasir.dao.enums.MockDataType;
import com.databasir.dao.tables.records.MockDataRuleRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MockDataRule extends TableImpl<MockDataRuleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>databasir.mock_data_rule</code>
     */
    public static final MockDataRule MOCK_DATA_RULE = new MockDataRule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MockDataRuleRecord> getRecordType() {
        return MockDataRuleRecord.class;
    }

    /**
     * The column <code>databasir.mock_data_rule.id</code>.
     */
    public final TableField<MockDataRuleRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>databasir.mock_data_rule.project_id</code>.
     */
    public final TableField<MockDataRuleRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>databasir.mock_data_rule.table_name</code>.
     */
    public final TableField<MockDataRuleRecord, String> TABLE_NAME = createField(DSL.name("table_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>databasir.mock_data_rule.column_name</code>.
     */
    public final TableField<MockDataRuleRecord, String> COLUMN_NAME = createField(DSL.name("column_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>databasir.mock_data_rule.dependent_table_name</code>.
     */
    public final TableField<MockDataRuleRecord, String> DEPENDENT_TABLE_NAME = createField(DSL.name("dependent_table_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>databasir.mock_data_rule.dependent_column_name</code>.
     */
    public final TableField<MockDataRuleRecord, String> DEPENDENT_COLUMN_NAME = createField(DSL.name("dependent_column_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>databasir.mock_data_rule.mock_data_type</code>.
     */
    public final TableField<MockDataRuleRecord, MockDataType> MOCK_DATA_TYPE = createField(DSL.name("mock_data_type"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("AUTO / REF / SCRIPT / PHONE / DATE / TIMESTAMP / ...", SQLDataType.VARCHAR)), this, "", new MockDataTypeConverter());

    /**
     * The column <code>databasir.mock_data_rule.mock_data_script</code>.
     */
    public final TableField<MockDataRuleRecord, String> MOCK_DATA_SCRIPT = createField(DSL.name("mock_data_script"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>databasir.mock_data_rule.update_at</code>.
     */
    public final TableField<MockDataRuleRecord, LocalDateTime> UPDATE_AT = createField(DSL.name("update_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>databasir.mock_data_rule.create_at</code>.
     */
    public final TableField<MockDataRuleRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private MockDataRule(Name alias, Table<MockDataRuleRecord> aliased) {
        this(alias, aliased, null);
    }

    private MockDataRule(Name alias, Table<MockDataRuleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>databasir.mock_data_rule</code> table reference
     */
    public MockDataRule(String alias) {
        this(DSL.name(alias), MOCK_DATA_RULE);
    }

    /**
     * Create an aliased <code>databasir.mock_data_rule</code> table reference
     */
    public MockDataRule(Name alias) {
        this(alias, MOCK_DATA_RULE);
    }

    /**
     * Create a <code>databasir.mock_data_rule</code> table reference
     */
    public MockDataRule() {
        this(DSL.name("mock_data_rule"), null);
    }

    public <O extends Record> MockDataRule(Table<O> child, ForeignKey<O, MockDataRuleRecord> key) {
        super(child, key, MOCK_DATA_RULE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Databasir.DATABASIR;
    }

    @Override
    public Identity<MockDataRuleRecord, Integer> getIdentity() {
        return (Identity<MockDataRuleRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MockDataRuleRecord> getPrimaryKey() {
        return Keys.KEY_MOCK_DATA_RULE_PRIMARY;
    }

    @Override
    public List<UniqueKey<MockDataRuleRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_MOCK_DATA_RULE_UK_PROJECT_ID_TABLE_NAME_COLUMN_NAME);
    }

    @Override
    public MockDataRule as(String alias) {
        return new MockDataRule(DSL.name(alias), this);
    }

    @Override
    public MockDataRule as(Name alias) {
        return new MockDataRule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MockDataRule rename(String name) {
        return new MockDataRule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MockDataRule rename(Name name) {
        return new MockDataRule(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, Integer, String, String, String, String, MockDataType, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
