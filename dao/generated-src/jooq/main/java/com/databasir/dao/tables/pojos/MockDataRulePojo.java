/*
 * This file is generated by jOOQ.
 */
package com.databasir.dao.tables.pojos;


import com.databasir.dao.enums.MockDataType;

import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MockDataRulePojo implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer       id;
    private Integer       projectId;
    private String        tableName;
    private String        columnName;
    private String        dependentTableName;
    private String        dependentColumnName;
    private MockDataType  mockDataType;
    private String        mockDataScript;
    private LocalDateTime updateAt;
    private LocalDateTime createAt;

    public MockDataRulePojo() {}

    public MockDataRulePojo(MockDataRulePojo value) {
        this.id = value.id;
        this.projectId = value.projectId;
        this.tableName = value.tableName;
        this.columnName = value.columnName;
        this.dependentTableName = value.dependentTableName;
        this.dependentColumnName = value.dependentColumnName;
        this.mockDataType = value.mockDataType;
        this.mockDataScript = value.mockDataScript;
        this.updateAt = value.updateAt;
        this.createAt = value.createAt;
    }

    public MockDataRulePojo(
        Integer       id,
        Integer       projectId,
        String        tableName,
        String        columnName,
        String        dependentTableName,
        String        dependentColumnName,
        MockDataType  mockDataType,
        String        mockDataScript,
        LocalDateTime updateAt,
        LocalDateTime createAt
    ) {
        this.id = id;
        this.projectId = projectId;
        this.tableName = tableName;
        this.columnName = columnName;
        this.dependentTableName = dependentTableName;
        this.dependentColumnName = dependentColumnName;
        this.mockDataType = mockDataType;
        this.mockDataScript = mockDataScript;
        this.updateAt = updateAt;
        this.createAt = createAt;
    }

    /**
     * Getter for <code>databasir.mock_data_rule.id</code>.
     */
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>databasir.mock_data_rule.id</code>.
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Getter for <code>databasir.mock_data_rule.project_id</code>.
     */
    public Integer getProjectId() {
        return this.projectId;
    }

    /**
     * Setter for <code>databasir.mock_data_rule.project_id</code>.
     */
    public void setProjectId(Integer projectId) {
        this.projectId = projectId;
    }

    /**
     * Getter for <code>databasir.mock_data_rule.table_name</code>.
     */
    public String getTableName() {
        return this.tableName;
    }

    /**
     * Setter for <code>databasir.mock_data_rule.table_name</code>.
     */
    public void setTableName(String tableName) {
        this.tableName = tableName;
    }

    /**
     * Getter for <code>databasir.mock_data_rule.column_name</code>.
     */
    public String getColumnName() {
        return this.columnName;
    }

    /**
     * Setter for <code>databasir.mock_data_rule.column_name</code>.
     */
    public void setColumnName(String columnName) {
        this.columnName = columnName;
    }

    /**
     * Getter for <code>databasir.mock_data_rule.dependent_table_name</code>.
     */
    public String getDependentTableName() {
        return this.dependentTableName;
    }

    /**
     * Setter for <code>databasir.mock_data_rule.dependent_table_name</code>.
     */
    public void setDependentTableName(String dependentTableName) {
        this.dependentTableName = dependentTableName;
    }

    /**
     * Getter for <code>databasir.mock_data_rule.dependent_column_name</code>.
     */
    public String getDependentColumnName() {
        return this.dependentColumnName;
    }

    /**
     * Setter for <code>databasir.mock_data_rule.dependent_column_name</code>.
     */
    public void setDependentColumnName(String dependentColumnName) {
        this.dependentColumnName = dependentColumnName;
    }

    /**
     * Getter for <code>databasir.mock_data_rule.mock_data_type</code>.
     */
    public MockDataType getMockDataType() {
        return this.mockDataType;
    }

    /**
     * Setter for <code>databasir.mock_data_rule.mock_data_type</code>.
     */
    public void setMockDataType(MockDataType mockDataType) {
        this.mockDataType = mockDataType;
    }

    /**
     * Getter for <code>databasir.mock_data_rule.mock_data_script</code>.
     */
    public String getMockDataScript() {
        return this.mockDataScript;
    }

    /**
     * Setter for <code>databasir.mock_data_rule.mock_data_script</code>.
     */
    public void setMockDataScript(String mockDataScript) {
        this.mockDataScript = mockDataScript;
    }

    /**
     * Getter for <code>databasir.mock_data_rule.update_at</code>.
     */
    public LocalDateTime getUpdateAt() {
        return this.updateAt;
    }

    /**
     * Setter for <code>databasir.mock_data_rule.update_at</code>.
     */
    public void setUpdateAt(LocalDateTime updateAt) {
        this.updateAt = updateAt;
    }

    /**
     * Getter for <code>databasir.mock_data_rule.create_at</code>.
     */
    public LocalDateTime getCreateAt() {
        return this.createAt;
    }

    /**
     * Setter for <code>databasir.mock_data_rule.create_at</code>.
     */
    public void setCreateAt(LocalDateTime createAt) {
        this.createAt = createAt;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("MockDataRulePojo (");

        sb.append(id);
        sb.append(", ").append(projectId);
        sb.append(", ").append(tableName);
        sb.append(", ").append(columnName);
        sb.append(", ").append(dependentTableName);
        sb.append(", ").append(dependentColumnName);
        sb.append(", ").append(mockDataType);
        sb.append(", ").append(mockDataScript);
        sb.append(", ").append(updateAt);
        sb.append(", ").append(createAt);

        sb.append(")");
        return sb.toString();
    }
}
