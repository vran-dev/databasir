/*
 * This file is generated by jOOQ.
 */
package com.databasir.dao.tables;


import com.databasir.dao.Databasir;
import com.databasir.dao.Keys;
import com.databasir.dao.converter.DocumentTemplatePropertyTypeConverter;
import com.databasir.dao.enums.DocumentTemplatePropertyType;
import com.databasir.dao.tables.records.DocumentTemplatePropertyRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * template property
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DocumentTemplatePropertyTable extends TableImpl<DocumentTemplatePropertyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>databasir.document_template_property</code>
     */
    public static final DocumentTemplatePropertyTable DOCUMENT_TEMPLATE_PROPERTY = new DocumentTemplatePropertyTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentTemplatePropertyRecord> getRecordType() {
        return DocumentTemplatePropertyRecord.class;
    }

    /**
     * The column <code>databasir.document_template_property.id</code>.
     */
    public final TableField<DocumentTemplatePropertyRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>databasir.document_template_property.key</code>.
     */
    public final TableField<DocumentTemplatePropertyRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>databasir.document_template_property.value</code>.
     */
    public final TableField<DocumentTemplatePropertyRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>databasir.document_template_property.default_value</code>.
     */
    public final TableField<DocumentTemplatePropertyRecord, String> DEFAULT_VALUE = createField(DSL.name("default_value"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>databasir.document_template_property.type</code>.
     */
    public final TableField<DocumentTemplatePropertyRecord, DocumentTemplatePropertyType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(64).nullable(false), this, "", new DocumentTemplatePropertyTypeConverter());

    /**
     * The column <code>databasir.document_template_property.create_at</code>.
     */
    public final TableField<DocumentTemplatePropertyRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private DocumentTemplatePropertyTable(Name alias, Table<DocumentTemplatePropertyRecord> aliased) {
        this(alias, aliased, null);
    }

    private DocumentTemplatePropertyTable(Name alias, Table<DocumentTemplatePropertyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("template property"), TableOptions.table());
    }

    /**
     * Create an aliased <code>databasir.document_template_property</code> table
     * reference
     */
    public DocumentTemplatePropertyTable(String alias) {
        this(DSL.name(alias), DOCUMENT_TEMPLATE_PROPERTY);
    }

    /**
     * Create an aliased <code>databasir.document_template_property</code> table
     * reference
     */
    public DocumentTemplatePropertyTable(Name alias) {
        this(alias, DOCUMENT_TEMPLATE_PROPERTY);
    }

    /**
     * Create a <code>databasir.document_template_property</code> table
     * reference
     */
    public DocumentTemplatePropertyTable() {
        this(DSL.name("document_template_property"), null);
    }

    public <O extends Record> DocumentTemplatePropertyTable(Table<O> child, ForeignKey<O, DocumentTemplatePropertyRecord> key) {
        super(child, key, DOCUMENT_TEMPLATE_PROPERTY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Databasir.DATABASIR;
    }

    @Override
    public Identity<DocumentTemplatePropertyRecord, Integer> getIdentity() {
        return (Identity<DocumentTemplatePropertyRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DocumentTemplatePropertyRecord> getPrimaryKey() {
        return Keys.KEY_DOCUMENT_TEMPLATE_PROPERTY_PRIMARY;
    }

    @Override
    public List<UniqueKey<DocumentTemplatePropertyRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_DOCUMENT_TEMPLATE_PROPERTY_UK_TYPE_KEY);
    }

    @Override
    public DocumentTemplatePropertyTable as(String alias) {
        return new DocumentTemplatePropertyTable(DSL.name(alias), this);
    }

    @Override
    public DocumentTemplatePropertyTable as(Name alias) {
        return new DocumentTemplatePropertyTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentTemplatePropertyTable rename(String name) {
        return new DocumentTemplatePropertyTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentTemplatePropertyTable rename(Name name) {
        return new DocumentTemplatePropertyTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, DocumentTemplatePropertyType, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
