/*
 * This file is generated by jOOQ.
 */
package com.databasir.dao.tables;


import com.databasir.dao.Databasir;
import com.databasir.dao.Indexes;
import com.databasir.dao.Keys;
import com.databasir.dao.tables.records.TableForeignKeyDocumentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TableForeignKeyDocument extends TableImpl<TableForeignKeyDocumentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>databasir.table_foreign_key_document</code>
     */
    public static final TableForeignKeyDocument TABLE_FOREIGN_KEY_DOCUMENT = new TableForeignKeyDocument();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TableForeignKeyDocumentRecord> getRecordType() {
        return TableForeignKeyDocumentRecord.class;
    }

    /**
     * The column <code>databasir.table_foreign_key_document.id</code>.
     */
    public final TableField<TableForeignKeyDocumentRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>databasir.table_foreign_key_document.table_document_id</code>.
     */
    public final TableField<TableForeignKeyDocumentRecord, Integer> TABLE_DOCUMENT_ID = createField(DSL.name("table_document_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>databasir.table_foreign_key_document.database_document_id</code>.
     */
    public final TableField<TableForeignKeyDocumentRecord, Integer> DATABASE_DOCUMENT_ID = createField(DSL.name("database_document_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>databasir.table_foreign_key_document.key_seq</code>.
     */
    public final TableField<TableForeignKeyDocumentRecord, Integer> KEY_SEQ = createField(DSL.name("key_seq"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>databasir.table_foreign_key_document.fk_name</code>.
     */
    public final TableField<TableForeignKeyDocumentRecord, String> FK_NAME = createField(DSL.name("fk_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>databasir.table_foreign_key_document.fk_table_name</code>.
     */
    public final TableField<TableForeignKeyDocumentRecord, String> FK_TABLE_NAME = createField(DSL.name("fk_table_name"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column
     * <code>databasir.table_foreign_key_document.fk_column_name</code>.
     */
    public final TableField<TableForeignKeyDocumentRecord, String> FK_COLUMN_NAME = createField(DSL.name("fk_column_name"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>databasir.table_foreign_key_document.pk_name</code>.
     */
    public final TableField<TableForeignKeyDocumentRecord, String> PK_NAME = createField(DSL.name("pk_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>databasir.table_foreign_key_document.pk_table_name</code>.
     */
    public final TableField<TableForeignKeyDocumentRecord, String> PK_TABLE_NAME = createField(DSL.name("pk_table_name"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column
     * <code>databasir.table_foreign_key_document.pk_column_name</code>.
     */
    public final TableField<TableForeignKeyDocumentRecord, String> PK_COLUMN_NAME = createField(DSL.name("pk_column_name"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>databasir.table_foreign_key_document.update_rule</code>.
     * NO_ACTION, CASCADE, SET_NULL, SET_DEFAULT
     */
    public final TableField<TableForeignKeyDocumentRecord, String> UPDATE_RULE = createField(DSL.name("update_rule"), SQLDataType.VARCHAR(128).nullable(false), this, "NO_ACTION, CASCADE, SET_NULL, SET_DEFAULT");

    /**
     * The column <code>databasir.table_foreign_key_document.delete_rule</code>.
     * NO_ACTION, CASCADE, SET_NULL, SET_DEFAULT
     */
    public final TableField<TableForeignKeyDocumentRecord, String> DELETE_RULE = createField(DSL.name("delete_rule"), SQLDataType.VARCHAR(128).nullable(false), this, "NO_ACTION, CASCADE, SET_NULL, SET_DEFAULT");

    /**
     * The column <code>databasir.table_foreign_key_document.create_at</code>.
     */
    public final TableField<TableForeignKeyDocumentRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private TableForeignKeyDocument(Name alias, Table<TableForeignKeyDocumentRecord> aliased) {
        this(alias, aliased, null);
    }

    private TableForeignKeyDocument(Name alias, Table<TableForeignKeyDocumentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>databasir.table_foreign_key_document</code> table
     * reference
     */
    public TableForeignKeyDocument(String alias) {
        this(DSL.name(alias), TABLE_FOREIGN_KEY_DOCUMENT);
    }

    /**
     * Create an aliased <code>databasir.table_foreign_key_document</code> table
     * reference
     */
    public TableForeignKeyDocument(Name alias) {
        this(alias, TABLE_FOREIGN_KEY_DOCUMENT);
    }

    /**
     * Create a <code>databasir.table_foreign_key_document</code> table
     * reference
     */
    public TableForeignKeyDocument() {
        this(DSL.name("table_foreign_key_document"), null);
    }

    public <O extends Record> TableForeignKeyDocument(Table<O> child, ForeignKey<O, TableForeignKeyDocumentRecord> key) {
        super(child, key, TABLE_FOREIGN_KEY_DOCUMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Databasir.DATABASIR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TABLE_FOREIGN_KEY_DOCUMENT_IDX_DATABASE_DOCUMENT_ID, Indexes.TABLE_FOREIGN_KEY_DOCUMENT_IDX_TABLE_DOCUMENT_ID);
    }

    @Override
    public Identity<TableForeignKeyDocumentRecord, Integer> getIdentity() {
        return (Identity<TableForeignKeyDocumentRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TableForeignKeyDocumentRecord> getPrimaryKey() {
        return Keys.KEY_TABLE_FOREIGN_KEY_DOCUMENT_PRIMARY;
    }

    @Override
    public TableForeignKeyDocument as(String alias) {
        return new TableForeignKeyDocument(DSL.name(alias), this);
    }

    @Override
    public TableForeignKeyDocument as(Name alias) {
        return new TableForeignKeyDocument(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TableForeignKeyDocument rename(String name) {
        return new TableForeignKeyDocument(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TableForeignKeyDocument rename(Name name) {
        return new TableForeignKeyDocument(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, Integer, Integer, Integer, String, String, String, String, String, String, String, String, LocalDateTime> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
