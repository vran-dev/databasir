/*
 * This file is generated by jOOQ.
 */
package com.databasir.dao.tables;


import com.databasir.dao.Databasir;
import com.databasir.dao.Indexes;
import com.databasir.dao.Keys;
import com.databasir.dao.tables.records.DocumentDiscussionRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DocumentDiscussion extends TableImpl<DocumentDiscussionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>databasir.document_discussion</code>
     */
    public static final DocumentDiscussion DOCUMENT_DISCUSSION = new DocumentDiscussion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentDiscussionRecord> getRecordType() {
        return DocumentDiscussionRecord.class;
    }

    /**
     * The column <code>databasir.document_discussion.id</code>.
     */
    public final TableField<DocumentDiscussionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>databasir.document_discussion.content</code>.
     */
    public final TableField<DocumentDiscussionRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>databasir.document_discussion.user_id</code>. user.id
     */
    public final TableField<DocumentDiscussionRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "user.id");

    /**
     * The column <code>databasir.document_discussion.project_id</code>.
     */
    public final TableField<DocumentDiscussionRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>databasir.document_discussion.table_name</code>.
     */
    public final TableField<DocumentDiscussionRecord, String> TABLE_NAME = createField(DSL.name("table_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>databasir.document_discussion.column_name</code>.
     */
    public final TableField<DocumentDiscussionRecord, String> COLUMN_NAME = createField(DSL.name("column_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>databasir.document_discussion.create_at</code>.
     */
    public final TableField<DocumentDiscussionRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private DocumentDiscussion(Name alias, Table<DocumentDiscussionRecord> aliased) {
        this(alias, aliased, null);
    }

    private DocumentDiscussion(Name alias, Table<DocumentDiscussionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>databasir.document_discussion</code> table
     * reference
     */
    public DocumentDiscussion(String alias) {
        this(DSL.name(alias), DOCUMENT_DISCUSSION);
    }

    /**
     * Create an aliased <code>databasir.document_discussion</code> table
     * reference
     */
    public DocumentDiscussion(Name alias) {
        this(alias, DOCUMENT_DISCUSSION);
    }

    /**
     * Create a <code>databasir.document_discussion</code> table reference
     */
    public DocumentDiscussion() {
        this(DSL.name("document_discussion"), null);
    }

    public <O extends Record> DocumentDiscussion(Table<O> child, ForeignKey<O, DocumentDiscussionRecord> key) {
        super(child, key, DOCUMENT_DISCUSSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Databasir.DATABASIR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.DOCUMENT_DISCUSSION_IDX_PROJECT_ID);
    }

    @Override
    public Identity<DocumentDiscussionRecord, Integer> getIdentity() {
        return (Identity<DocumentDiscussionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DocumentDiscussionRecord> getPrimaryKey() {
        return Keys.KEY_DOCUMENT_DISCUSSION_PRIMARY;
    }

    @Override
    public DocumentDiscussion as(String alias) {
        return new DocumentDiscussion(DSL.name(alias), this);
    }

    @Override
    public DocumentDiscussion as(Name alias) {
        return new DocumentDiscussion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentDiscussion rename(String name) {
        return new DocumentDiscussion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentDiscussion rename(Name name) {
        return new DocumentDiscussion(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, Integer, Integer, String, String, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
